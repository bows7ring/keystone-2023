diff --git a/keystone-enclave.c b/keystone-enclave.c
index 5643566..5f86abb 100644
--- a/keystone-enclave.c
+++ b/keystone-enclave.c
@@ -68,9 +68,11 @@ struct enclave* create_enclave(unsigned long min_pages)
   enclave->eid = -1;
   enclave->utm = NULL;
   enclave->close_on_pexit = 1;
-
   enclave->epm = kmalloc(sizeof(struct epm), GFP_KERNEL);
   enclave->is_init = true;
+  enclave->snapshot_ueid = 0;
+  enclave->ref_count = 0;
+
   if (!enclave->epm)
   {
     keystone_err("failed to allocate epm\n");
diff --git a/keystone-ioctl.c b/keystone-ioctl.c
index 2d44893..b51878f 100644
--- a/keystone-ioctl.c
+++ b/keystone-ioctl.c
@@ -7,9 +7,52 @@
 #include "keystone_user.h"
 #include <asm/sbi.h>
 #include <linux/uaccess.h>
+DEFINE_MUTEX(keystone_enclave_ref_mutex);
 
 int __keystone_destroy_enclave(unsigned int ueid);
 
+int keystone_clone_enclave(struct file *filep, unsigned long arg)
+{
+  /* create parameters */
+  struct keystone_ioctl_clone_enclave *enclp = (struct keystone_ioctl_clone_enclave *) arg;
+
+  struct enclave *enclave = get_enclave_by_id(enclp->eid);
+  if (!enclave) {
+    keystone_err("invalid enclave id %d in create_enclave_snapshot\n", enclp->eid);
+    return -EINVAL;
+  }
+
+  struct enclave *snapshot_encl = get_enclave_by_id(enclp->snapshot_eid);
+  if (!snapshot_encl) {
+    keystone_err("invalid enclave id %d in create_enclave_snapshot\n", enclp->snapshot_eid);
+    return -EINVAL;
+  }
+
+  /* set the child's snapshot_ueid to parent's ueid */
+  enclave->snapshot_ueid = enclp->snapshot_eid;
+
+  /* increase the reference count of the parent */
+  mutex_lock(&keystone_enclave_ref_mutex);
+  snapshot_encl->ref_count++;
+  mutex_unlock(&keystone_enclave_ref_mutex);
+
+  /* SM SBI */
+  struct keystone_sbi_clone_create create_clone_args;
+  create_clone_args.snapshot_eid = snapshot_encl->eid;
+  create_clone_args.epm_region.paddr = enclp->epm_paddr;
+  create_clone_args.utm_region.paddr = enclp->utm_paddr;
+  create_clone_args.epm_region.size = enclp->epm_size;
+  create_clone_args.utm_region.size = enclp->utm_size;
+  create_clone_args.retval = enclp->retval;
+
+  struct sbiret ret;
+  ret = sbi_sm_clone_enclave(&create_clone_args);
+  enclave->eid = ret.value;
+  enclave->is_init = false;
+
+  return 0;
+}
+
 int keystone_create_enclave(struct file *filep, unsigned long arg)
 {
   /* create parameters */
@@ -17,6 +60,7 @@ int keystone_create_enclave(struct file *filep, unsigned long arg)
 
   struct enclave *enclave;
   enclave = create_enclave(enclp->min_pages);
+  enclave->is_clone = enclp->is_clone;
 
   if (enclave == NULL) {
     return -ENOMEM;
@@ -46,7 +90,7 @@ int keystone_finalize_enclave(unsigned long arg)
 
   enclave = get_enclave_by_id(enclp->eid);
   if(!enclave) {
-    keystone_err("invalid enclave id\n");
+    keystone_err("invalid enclave id %d in finalize_enclave\n", enclp->eid);
     return -EINVAL;
   }
 
@@ -103,7 +147,7 @@ int keystone_run_enclave(unsigned long data)
   enclave = get_enclave_by_id(ueid);
 
   if (!enclave) {
-    keystone_err("invalid enclave id\n");
+    keystone_err("invalid enclave id %d in run_enclave\n", ueid);
     return -EINVAL;
   }
 
@@ -131,7 +175,7 @@ int utm_init_ioctl(struct file *filp, unsigned long arg)
   enclave = get_enclave_by_id(enclp->eid);
 
   if(!enclave) {
-    keystone_err("invalid enclave id\n");
+    keystone_err("invalid enclave id %d in utm_init\n", enclp->eid);
     return -EINVAL;
   }
 
@@ -171,11 +215,27 @@ int __keystone_destroy_enclave(unsigned int ueid)
   struct enclave *enclave;
   enclave = get_enclave_by_id(ueid);
 
+  //keystone_info("enclave %d destroy\n", ueid);
   if (!enclave) {
-    keystone_err("invalid enclave id\n");
+    keystone_err("invalid enclave id %d in destroy_enclave\n", ueid);
     return -EINVAL;
   }
 
+  struct enclave *snapshot_encl;
+  snapshot_encl = get_enclave_by_id(enclave->snapshot_ueid);
+
+  if (snapshot_encl) {
+    /* decrease the reference count of the parent */
+    mutex_lock(&keystone_enclave_ref_mutex);
+    snapshot_encl->ref_count--;
+    mutex_unlock(&keystone_enclave_ref_mutex);
+  }
+
+  if (enclave->ref_count > 0) {
+    //keystone_info("keystone_destroy_enclave: skipping (snapshot is in use)\n");
+    return 0;
+  }
+
   if (enclave->eid >= 0) {
     ret = sbi_sm_destroy_enclave(enclave->eid);
     if (ret.error) {
@@ -186,7 +246,6 @@ int __keystone_destroy_enclave(unsigned int ueid)
     keystone_warn("keystone_destroy_enclave: skipping (enclave does not exist)\n");
   }
 
-
   destroy_enclave(enclave);
   enclave_idr_remove(ueid);
 
@@ -203,7 +262,7 @@ int keystone_resume_enclave(unsigned long data)
 
   if (!enclave)
   {
-    keystone_err("invalid enclave id\n");
+    keystone_err("invalid enclave id %d in resume_enclave\n", ueid);
     return -EINVAL;
   }
 
@@ -252,6 +311,9 @@ long keystone_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
     case KEYSTONE_IOC_RESUME_ENCLAVE:
       ret = keystone_resume_enclave((unsigned long) data);
       break;
+    case KEYSTONE_IOC_CLONE_ENCLAVE:
+      ret = keystone_clone_enclave(filep, (unsigned long) data);
+      break;
     /* Note that following commands could have been implemented as a part of ADD_PAGE ioctl.
      * However, there was a weird bug in compiler that generates a wrong control flow
      * that ends up with an illegal instruction if we combine switch-case and if statements.
diff --git a/keystone-sbi.c b/keystone-sbi.c
index d0c6782..3c9871f 100644
--- a/keystone-sbi.c
+++ b/keystone-sbi.c
@@ -6,6 +6,12 @@ struct sbiret sbi_sm_create_enclave(struct keystone_sbi_create_t* args) {
       (unsigned long) args, 0, 0, 0, 0, 0);
 }
 
+struct sbiret sbi_sm_clone_enclave(struct keystone_sbi_clone_create* args) {
+  return sbi_ecall(KEYSTONE_SBI_EXT_ID,
+      SBI_SM_CLONE_ENCLAVE,
+      (unsigned long) args, 0, 0, 0, 0, 0);
+}
+
 struct sbiret sbi_sm_run_enclave(unsigned long eid) {
   return sbi_ecall(KEYSTONE_SBI_EXT_ID,
       SBI_SM_RUN_ENCLAVE,
diff --git a/keystone-sbi.h b/keystone-sbi.h
index 5077fd9..6a6e3f3 100644
--- a/keystone-sbi.h
+++ b/keystone-sbi.h
@@ -13,6 +13,7 @@
 #define SBI_SM_DESTROY_ENCLAVE  2002
 #define SBI_SM_RUN_ENCLAVE      2003
 #define SBI_SM_RESUME_ENCLAVE   2005
+#define SBI_SM_CLONE_ENCLAVE    2006
 
 
 struct keystone_sbi_pregion_t
@@ -21,6 +22,15 @@ struct keystone_sbi_pregion_t
   size_t size;
 };
 
+struct keystone_sbi_clone_create
+{
+  struct keystone_sbi_pregion_t epm_region;
+  struct keystone_sbi_pregion_t utm_region;
+  unsigned long snapshot_eid;
+  unsigned int* eid_pptr;
+  unsigned long retval; // return value for snapshot SBI
+};
+
 struct keystone_sbi_create_t
 {
   // Memory regions for the enclave
@@ -40,5 +50,6 @@ struct sbiret sbi_sm_create_enclave(struct keystone_sbi_create_t* args);
 struct sbiret sbi_sm_destroy_enclave(unsigned long eid);
 struct sbiret sbi_sm_run_enclave(unsigned long eid);
 struct sbiret sbi_sm_resume_enclave(unsigned long eid);
+struct sbiret sbi_sm_clone_enclave(struct keystone_sbi_clone_create* args);
 
 #endif
diff --git a/keystone.c b/keystone.c
index 23a2c44..7faa2e8 100644
--- a/keystone.c
+++ b/keystone.c
@@ -44,8 +44,8 @@ int keystone_mmap(struct file* filp, struct vm_area_struct *vma)
   unsigned long vsize, psize;
   vaddr_t paddr;
   enclave = get_enclave_by_id((unsigned long) filp->private_data);
-  if(!enclave) {
-    keystone_err("invalid enclave id\n");
+  if (!enclave) {
+    keystone_err("invalid enclave id %d in mmap\n", filp->private_data);
     return -EINVAL;
   }
 
@@ -53,7 +53,7 @@ int keystone_mmap(struct file* filp, struct vm_area_struct *vma)
   epm = enclave->epm;
   vsize = vma->vm_end - vma->vm_start;
 
-  if(enclave->is_init){
+  if (enclave->is_init && !enclave->is_clone){
     if (vsize > PAGE_SIZE)
       return -EINVAL;
     paddr = __pa(epm->root_page_table) + (vma->vm_pgoff << PAGE_SHIFT);
@@ -67,6 +67,7 @@ int keystone_mmap(struct file* filp, struct vm_area_struct *vma)
     psize = utm->size;
     if (vsize > psize)
       return -EINVAL;
+    // pr_info("utm->ptr: %px, _pa(utm->ptr): %px, vma->vm_start: %px, vsize: %lu\n", utm->ptr, __pa(utm->ptr), vma->vm_start, vsize);
     remap_pfn_range(vma,
                     vma->vm_start,
                     __pa(utm->ptr) >> PAGE_SHIFT,
diff --git a/keystone.h b/keystone.h
index a99ab03..d08b656 100644
--- a/keystone.h
+++ b/keystone.h
@@ -56,6 +56,9 @@ struct enclave
   struct utm* utm;
   struct epm* epm;
   bool is_init;
+  bool is_clone;
+  unsigned long snapshot_ueid;
+  int ref_count; // number of children
 };
 
 
diff --git a/keystone_user.h b/keystone_user.h
index 7f0da7c..4291a31 100644
--- a/keystone_user.h
+++ b/keystone_user.h
@@ -23,6 +23,8 @@
   _IOR(KEYSTONE_IOC_MAGIC, 0x06, struct keystone_ioctl_create_enclave)
 #define KEYSTONE_IOC_UTM_INIT \
   _IOR(KEYSTONE_IOC_MAGIC, 0x07, struct keystone_ioctl_create_enclave)
+#define KEYSTONE_IOC_CLONE_ENCLAVE \
+  _IOR(KEYSTONE_IOC_MAGIC, 0x08, struct keystone_ioctl_clone_enclave)
 
 #define RT_NOEXEC 0
 #define USER_NOEXEC 1
@@ -37,6 +39,18 @@ struct runtime_params_t {
   uintptr_t  untrusted_size;
 };
 
+struct keystone_ioctl_clone_enclave {
+  uintptr_t epm_paddr;
+  uintptr_t utm_paddr;
+
+  uintptr_t epm_size;
+  uintptr_t utm_size;
+
+  uintptr_t eid;
+  uintptr_t snapshot_eid;
+  uintptr_t retval;
+};
+
 struct keystone_ioctl_create_enclave {
   uintptr_t eid;
 
@@ -60,6 +74,8 @@ struct keystone_ioctl_create_enclave {
   uintptr_t epm_size;
   uintptr_t utm_size;
 
+  uintptr_t is_clone;
+
   // Runtime Parameters
   struct runtime_params_t params;
 };
